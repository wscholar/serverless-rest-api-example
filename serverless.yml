service: restapi-serverless-template

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-plugin-offline-dynamodb-stream
  - serverless-aws-documentation
  - serverless-jest-plugin
  - serverless-domain-manager
  - serverless-offline
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  region: ${opt:region, 'us-east-1'}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    SERVICE_NAME: ${self:service}
    AUTH0_CLIENT_ID: ${self:custom.domains.${self:custom.stage}} #AUTH0 USES API URL BY DEFAULT
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./examplekey.pem)}
    #TODO: Either make vars passed in or encrypt secrets file
    DYANMODB_LOCAL_HOST: ${file(./secrets.json):DYANMODB_LOCAL_HOST}
    DYANMODB_LOCAL_PORT: ${file(./secrets.json):DYANMODB_LOCAL_PORT}
  iamRoleStatements:
    - Effect: Allow
      Action: #Roles needed for Dynamo
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
custom:
  defaultStage: dev
  profiles:
      prod: prodProfile #aws profile name for prod to use in config
      staging: stagingProfile #aws profile name for staging to use in config
      dev: devProfile #aws profile name for dev to use in config
  stage: ${opt:stage, self:custom.defaultStage}
  domains:
    prod: ${file(./secrets.json):PROD_API_URL}
    staging: ${file(./secrets.json):STAGING_API_URL}
    dev: ${file(./secrets.json):DEV_API_URL}
  customDomain:
      basePath: ${file(./secrets.json):API_BASE_URL} #if you want all endpoints to start at say /omedym/ otherwise it is based on functions
      domainName: ${self:custom.domains.${self:custom.stage}}
      stage: "${self:custom.stage}"
      createRoute53Record: true
  webpack:
      webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
      includeModules:   # Node modules configuration for packaging
        forceExclude:
          - aws-sdk
      packager: 'npm'   # Packager that will be used to package your external modules
  dynamodb:  
    stages:
      - dev
    start:
      port: 8000
      inMemory: true #when you stop offline mode db goes away if true
      migrate: true #will create the tables for you
      #seed: true 
      #convertEmptyValues: true
      #noStart: true #only run if you are keeping local dynamo running
  dynamodbStream: 
      host: localhost 
      port: 8000
      streams:
        - table: restapi-serverless-template-dev #TODO change based on Service or variablize
          functions:
            - dynostream
  #serverless-offline:
  #  babelOptions:
  #    presets: ["env","flow"]
  jest:
      # You can pass jest options here
      # See details here: https://facebook.github.io/jest/docs/configuration.html
      # For instance, uncomment next line to enable code coverage
      collectCoverage: true
  documentation: # See https://github.com/deliveryhero/serverless-aws-documentation for details
    version: '3'
    summary: 'Todo API'
    description: 'A todo API documented with OpenAPI specification'
    resources:
      -
        path: "todos"
        description: "Path used for creating and listing todos"
      -
        path: "todos/{id}"
        description: "Path used for getting, updating, and deleting todos"
    models:
      -
        name: "todo"
        description: "a todo object"
        contentType: "application/json"
        schema:
          type: object
          properties:
            id:
              type: string
              format: uuid
            text:
              type: string
              format: string
            checked:
              type: boolean
            createdAt:
              type: number
            updatedAt:
              type: number
          required:
            - id
            - checked
            - text
            - createdAt
            - updatedAt
      -
        name: "todoCreateRequest"
        description: "a todo create request model"
        contentType: "application/json"
        schema:
          type: object
          properties:
            text:
              type: string
              format: string
          required:
            - text
      -
        name: "todoUpdateRequest"
        description: "a todo update request model"
        contentType: "application/json"
        schema:
          type: object
          properties:
            text:
              type: string
              format: string
            checked:
              type: boolean
          required:
            - text
            - checked
      -
        name: "todoList"
        description: "a list of todo objects"
        contentType: "application/json"
        schema:
          type: array
          items:
            $ref: "{{model: todo}}"
      -
          name: "awsError"
          description: "an aws internal server error, usually with status code 502 (bad gateway)"
          contentType: "application/json"
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message 
resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        StreamSpecification:
              StreamViewType: NEW_IMAGE
package:
  individually: true 
functions:
  authorizerFunc:
    handler: src/ath/handler.auth
    events:
      - http:
          cors: true
          path: ath
          method: post
  dynostream:
    handler: src/dynostream/handler.record
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - TodosDynamoDbTable
              - StreamArn
          batchSize: 1
  create:
    handler: src/todos/create.create
    events:
      - http:
          authorizer: authorizerFunc # execute this before
          path: todos
          method: post
          cors: true
          documentation:
              summary: "create a new todo"
              requestBody:
                description: "body containing 'text' property for the todo"
              requestModels:
                  "application/json": "todoCreateRequest"
              methodResponses:
                -
                  statusCode: "200"
                  responseBody:
                    description: "an empty response"
                -
                  statusCode: "502"
                  responseModels:
                    "application/json": "awsError"
  list:
    handler: src/todos/list.list
    events:
      - http:
          authorizer: authorizerFunc # execute this before
          path: todos
          method: get
          cors: true
          documentation:
              summary: "list all todos"
              methodResponses:
                -
                  statusCode: "200"
                  responseBody:
                    description: "a list of todo objects"
                  responseModels:
                    "application/json": "todoList"
                -
                  statusCode: "502"
                  responseModels:
                    "application/json": "awsError"

  get:
    handler: src/todos/get.get
    events:
      - http:
          authorizer: authorizerFunc # execute this before
          path: todos/{id}
          method: get
          cors: true
          documentation:
              summary: "get a todo by its id"
              pathParams:
                -
                  name: "id"
                  required: true
                  description: "the id of the todo to get"
              methodResponses:
                -
                  statusCode: "200"
                  responseBody:
                    description: "a todo object"
                  responseModels:
                    "application/json": "todo"
                -
                  statusCode: "502"
                  responseModels:
                    "application/json": "awsError"

  update:
    handler: src/todos/update.update
    events:
      - http:
          authorizer: authorizerFunc # execute this before
          path: todos/{id}
          method: put
          cors: true
          documentation:
              summary: "update a todo by its id"
              requestBody:
                description: "body containing 'checked' and 'text' properties for the todo"
              pathParams:
                -
                  name: "id"
                  required: true
                  description: "the id of the todo to update"
              requestModels:
                  "application/json": "todoUpdateRequest"
              methodResponses:
                -
                  statusCode: "200"
                  responseBody:
                    description: "an empty response"
                -
                  statusCode: "502"
                  responseModels:
                    "application/json": "awsError"

  delete:
    handler: src/todos/delete.delete
    events:
      - http:
          authorizer: authorizerFunc # execute this before
          path: todos/{id}
          method: delete
          cors: true
          documentation:
              summary: "delete a todo by its id"
              pathParams:
                -
                  name: "id"
                  required: true
                  description: "the id of the todo to delete"
              methodResponses:
                -
                  statusCode: "200"
                  responseBody:
                    description: "an empty response"
                -
                  statusCode: "502"
                  responseModels:
                    "application/json": "awsError"